/*
 * Copyright (C) 2013 OBN-soft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.obnsoft.chred;

import java.util.Arrays;

public class PrgData {

    private static final byte[] HEADER =
        {'P', 'E', 'T', 'C', '0', '3', '0', '0', 'R', 'P', 'R', 'G'};
    private static final char[] CHAR_TABLE = {
        0x3000, 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0401,
        0x0416, 0x0417, 0x2605, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D,
        0x266A, 0x041E, 0x043D, 0x041F, 0x0420, 0x0421, 0x0422, 0x0423,
        0x0424, 0x0425, 0x25CE, 0x0426, 0x2192, 0x2190, 0x2191, 0x2193,
        0x3000, 0xFF01, 0x201D, 0xFF03, 0xFF04, 0xFF05, 0xFF06, 0x2019,
        0xFF08, 0xFF09, 0xFF0A, 0xFF0B, 0xFF0C, 0xFF0D, 0xFF0E, 0xFF0F,
        0xFF10, 0xFF11, 0xFF12, 0xFF13, 0xFF14, 0xFF15, 0xFF16, 0xFF17,
        0xFF18, 0xFF19, 0xFF1A, 0xFF1B, 0xFF1C, 0xFF1D, 0xFF1E, 0xFF1F,
        0xFF20, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27,
        0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F,
        0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37,
        0xFF38, 0xFF39, 0xFF3A, 0xFF3B, 0xFFE5, 0xFF3D, 0xFF3E, 0xFF3F,
        0xFF40, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47,
        0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F,
        0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57,
        0xFF58, 0xFF59, 0xFF5A, 0xFF5B, 0xFFE4, 0xFF5D, 0xFF5E, 0xFF3C,
        0x25C7, 0x2501, 0x2503, 0x250F, 0x2513, 0x251B, 0x2517, 0x2523,
        0x2533, 0x252B, 0x253B, 0x254B, 0x2520, 0x252F, 0x2528, 0x2537,
        0x2534, 0x252C, 0x251C, 0x253C, 0x2524, 0x2500, 0x2502, 0x253F,
        0x250C, 0x2510, 0x2514, 0x2518, 0x251D, 0x2530, 0x2525, 0x2538,
        0x2015, 0x3002, 0x300C, 0x300D, 0x3001, 0x30FB, 0x30F2, 0x30A1,
        0x30A3, 0x30A5, 0x30A7, 0x30A9, 0x30E3, 0x30E5, 0x30E7, 0x30C3,
        0x30FC, 0x30A2, 0x30A4, 0x30A6, 0x30A8, 0x30AA, 0x30AB, 0x30AD,
        0x30AF, 0x30B1, 0x30B3, 0x30B5, 0x30B7, 0x30B9, 0x30BB, 0x30BD,
        0x30BF, 0x30C1, 0x30C4, 0x30C6, 0x30C8, 0x30CA, 0x30CB, 0x30CC,
        0x30CD, 0x30CE, 0x30CF, 0x30D2, 0x30D5, 0x30D8, 0x30DB, 0x30DE,
        0x30DF, 0x30E0, 0x30E1, 0x30E2, 0x30E4, 0x30E6, 0x30E8, 0x30E9,
        0x30EA, 0x30EB, 0x30EC, 0x30ED, 0x30EF, 0x30F3, 0x309B, 0x309C,
        0x25A0, 0x25CF, 0x25B2, 0x25BC, 0x25A1, 0x25CB, 0x25B3, 0x25BD,
        0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E,
        0x042F, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0451,
        0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x2542,
    };

    public static String convertToString(PTCFile ptcfile, boolean isFullCharset) {
        /*  Check header and so on  */
        byte[] data = ptcfile.getData();
        if (data.length <= 24) {
            return null;
        }
        byte[] headData = new byte[HEADER.length];
        System.arraycopy(data, 0, headData, 0, HEADER.length);
        if (!Arrays.equals(headData, HEADER)) {
            return null;
        }
        int dataLen = Utils.extractValue(data, 20, 4) + 24;
        if (data.length < dataLen) {
            return null;
        }

        /*  Convert  */
        StringBuffer buf = new StringBuffer(dataLen - 24);
        int val = 0;
        if (isFullCharset) {
            for (int i = 24; i < dataLen; i++) {
                val = data[i] & 0xFF;
                if (val == 0x0D) {
                    buf.append(Utils.LF);
                } else {
                    buf.append(CHAR_TABLE[val]);
                }
            }
        } else {
            for (int i = 24; i < dataLen; i++) {
                val = data[i] & 0xFF;
                if (val == 0x0D) {
                    buf.append(Utils.LF);
                } else if (val >= 0x20 && val <= 0x7E) {
                    buf.append((char) val);
                } else if (val >= 0xA1 && val <= 0xDF) {
                    buf.append((char) (val + 0xFEC0));
                } else {
                    buf.append('?');
                }
            }
        }
        if (val != 0x0D) {
            buf.append(Utils.LF);
        }
        return buf.toString();
    }

}
